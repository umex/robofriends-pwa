{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","props","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","i","key","SearchBox","searchField","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowy","border","children","ErrorBoundry","hasError","info","this","setState","React","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.758d9bb8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\n//lahko bi ze tuki destructuring naredu\r\nconst Card = (props) => {\r\n    const {name, email, id} = props;\r\n    //lahko bi uporabljal tud props.name\r\n    return(\r\n        //to spodi je JSX\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}></img>\r\n            <div>\r\n                <h2>{name}</h2> \r\n                <p>{email}</p>\r\n            </div>        \r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots}) => {\r\n    /*\r\n    if (true){\r\n        throw new Error('Noooo');\r\n    }\r\n    */\r\n   \r\n    console.log('CardList');\r\n    const cardArray  = robots.map((user,i)=>{\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n    })\r\n\r\n    return(\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    console.log('SearchBox');\r\n    return(\r\n        <div className = 'p2'>\r\n            <input \r\n            aria-label='Search Robots'\r\n            className = 'pa3 ba b-green bg-lightest-blue'\r\n            type = 'search' \r\n            placeholder = 'search robots'\r\n            onChange = {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        // 2x{{}} zato ker prvi je za javascrip drugi pa potem za objekt\r\n        <div style={{ overflowy: 'scroll', border: '5px solid black'}}>\r\n            {props.children}\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooops. That is not good</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    //to je ze metoda reacta\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        if (this.state.count !== nextState.count) {\r\n            return true;\r\n          }\r\n        return false;\r\n    }\r\n\r\n    updateCount = () => {\r\n        //this.setState({count:this.state.count + 1})\r\n\r\n        //to nam returna nov state\r\n        this.setState(state=>{\r\n            return {count: state.count +1}\r\n        })\r\n    }\r\n\r\n    render(){\r\n        console.log('CounterButton');\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount} >\r\n                Count: {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from '../components/CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false;\r\n    }\r\n    render(){\r\n        console.log('Header');\r\n        return (\r\n        <div>\r\n            <h1 className='f1'>Robofriends</h1> \r\n            <CounterButton color={'red'}/> \r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Header from '../components/Header';\r\n//import {robots} from './robots'\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\n//mapStateToProps, mapDispatchToProps\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return{\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    //onRequestRobots: () => requestRobots(dispatch)\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n  \r\n}\r\n\r\nclass App extends React.Component {\r\n  //tega ne rabimo vec, ker nimamo vec stateov. robote bomo dobil iz propov -> onRequestRobots()\r\n  /*\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      robots: []\r\n    }\r\n    console.log('constructor');\r\n  }\r\n  */\r\n  componentDidMount(){\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    //zarad tega ni treba zdej ppovsod pisat this.state.searchfield.toLowerCase()\r\n\r\n    const {searchField, onSearchChange, robots, isPending} = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    if (isPending){\r\n      return <h1>Loading</h1>\r\n    }else{\r\n      return(\r\n        <div className='tc'>\r\n          <Header />\r\n          <SearchBox searchChange = {onSearchChange}/>\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots = {filteredRobots}/>\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n        );\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n//ta del je iz avtomaske generacije kode\r\n//component ma ppravilo da mora vsaj nekaj zrenderirat\r\n/*\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n          </a>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n*/\r\n\r\n\r\n\r\n//tako je novejse ampak smo spremenili ker je tutorial zadaj po verzijah reacta\r\n/*\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n*/\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots= () => (dispatch)=> {\r\n\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data=> dispatch({type:REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n\r\n/*\r\nexport const setSearchField = (text) => {\r\n    console.log(text);\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n*/","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField:''\r\n}\r\nconst initialStateRobots = {\r\n    isPending:false,\r\n    robots:[],\r\n    error:''\r\n}\r\n\r\n// {} -> pomeni empty object\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n            //to je kao isto\r\n            //return {...state, searchField:action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestRobots =  (state=initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending:false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error:action.payload, isPending:false})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer =  combineReducers({searchRobots,requestRobots})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n\r\nReactDOM.render(\r\n    //provider je del reduxa\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, \r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}